buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.easydb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

sourceSets {
	test {
		resources {
			srcDir 'test'
		}
	}
	integration {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration/groovy')
		}
		resources.srcDir file('src/integration/resources')
	}
}

configurations {
	integrationCompile.extendsFrom testCompile
	integrationRuntime.extendsFrom testRuntime
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: '1.10.7.RELEASE'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
	compile group: 'org.springframework.boot', name: 'spring-boot-actuator', version: '1.5.13.RELEASE'
	compile group: 'io.micrometer', name: 'micrometer-spring-legacy', version: '1.0.4'
	compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.0.4'

	testCompile 'org.codehaus.groovy:groovy-all:2.4.4'
	testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile group: 'com.github.fakemongo', name: 'fongo', version: '2.1.0'
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integration.output.classesDir
	classpath = sourceSets.integration.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test


task run {
	doFirst {
		String profile = project.hasProperty('profile') ? project.property('profile'): 'production'
		bootRun.systemProperty 'spring.profiles.active', profile
	}
}

bootRun {
	dependsOn run
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}